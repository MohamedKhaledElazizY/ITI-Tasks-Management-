@model SmartTask.Web.ViewModels.ProjectVM.ProjectProgressDetailsViewModel

@{
    ViewData["Title"] = Model.Name + " - Details";
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<!-- Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

<div class="container-fluid py-4">
    <!-- Breadcrumb -->
    <nav aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="@Url.Action("Index", "ProjectProgress")">Projects</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Model.Name</li>
        </ol>
    </nav>

    <!-- Project Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h1 class="h2 mb-0">@Model.Name</h1>
                <a href="@Url.Action("Create", "Task", new { projectId = Model.Id })" class="btn btn-primary">
                    <i class="fas fa-plus me-1"></i> Add Task
                </a>
            </div>
            <p class="text-muted mt-2">@Model.Description</p>
        </div>
    </div>

    <!-- Project Overview Cards -->
    <div class="row mb-4">
        <!-- Due Date Card -->
        <div class="col-md-3 mb-4">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title">Due Date</h5>
                    <div class="d-flex align-items-center">
                        <div class="calendar-icon bg-light rounded p-2 me-3">
                            <i class="far fa-calendar-alt fa-2x text-primary"></i>
                        </div>
                        <div>
                            @if (Model.EndDate.HasValue)
                            {
                                <h4 class="mb-0">@Model.EndDate.Value.ToString("MM/dd/yyyy")</h4>
                                <span class="text-muted">@Model.DaysLeft days remaining</span>
                            }
                            else
                            {
                                <h4 class="mb-0">No due date</h4>
                                <span class="text-muted">No timeline set</span>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Team Members Card -->
        <div class="col-md-3 mb-4">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title">Team Members</h5>
                    <div class="d-flex flex-wrap mt-3">
                        @foreach (var member in Model.Members.Take(5))
                        {
                            <div class="avatar-circle me-2 mb-2" data-bs-toggle="tooltip" title="@member.UserName">
                                <div class="avatar-placeholder rounded-circle d-flex justify-content-center align-items-center"
                                     style="width: 45px; height: 45px; background-color: #0091ea; color: white;">
                                    @(member.UserName.Substring(0, 1).ToUpper())
                                </div>
                            </div>
                        }
                        @if (Model.Members.Count > 5)
                        {
                            <div class="avatar-circle me-2 mb-2" data-bs-toggle="tooltip"
                                 title="@(Model.Members.Count - 5) more members">
                                <div class="avatar-placeholder rounded-circle d-flex justify-content-center align-items-center"
                                     style="width: 45px; height: 45px; background-color: #757575; color: white;">
                                    +@(Model.Members.Count - 5)
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Progress Card -->
        <div class="col-md-3 mb-4">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title">Progress</h5>
                    <div class="mt-3">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <h3 class="mb-0">@Model.ProgressPercentage%</h3>
                            <span class="text-muted">@Model.CompletedTasks/@(Model.CompletedTasks + Model.InProgressTasks + Model.TodoTasks) tasks</span>
                        </div>
                        <div class="progress" style="height: 10px;">
                            <div class="progress-bar bg-primary" role="progressbar"
                                 style="width: @Model.ProgressPercentage%;"
                                 aria-valuenow="@Model.ProgressPercentage" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Status Summary Card -->
        <div class="col-md-3 mb-4">
            <div class="card shadow-sm h-100">
                <div class="card-body">
                    <h5 class="card-title">Status Summary</h5>
                    <div class="d-flex flex-column justify-content-center mt-3">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="text-success">Completed</span>
                            <span class="badge bg-success rounded-pill">@Model.CompletedTasks</span>
                        </div>
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="text-primary">In Progress</span>
                            <span class="badge bg-primary rounded-pill">@Model.InProgressTasks</span>
                        </div>
                        <div class="d-flex justify-content-between align-items-center">
                            <span class="text-warning">Todo</span>
                            <span class="badge bg-warning rounded-pill">@Model.TodoTasks</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content Tabs -->
    <div class="card shadow-sm mb-4">
        <div class="card-header bg-white p-3">
            <ul class="nav nav-tabs card-header-tabs" id="projectTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="tasks-tab" data-bs-toggle="tab" data-bs-target="#tasks"
                            type="button" role="tab" aria-controls="tasks" aria-selected="true">
                        All Tasks
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="progress-tab" data-bs-toggle="tab" data-bs-target="#progress"
                            type="button" role="tab" aria-controls="progress" aria-selected="false">
                        Progress Timeline
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="distribution-tab" data-bs-toggle="tab" data-bs-target="#distribution"
                            type="button" role="tab" aria-controls="distribution" aria-selected="false">
                        Task Distribution
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="statistics-tab" data-bs-toggle="tab" data-bs-target="#statistics"
                            type="button" role="tab" aria-controls="statistics" aria-selected="false">
                        Project Statistics
                    </button>
                </li>
            </ul>
        </div>
        <div class="card-body">
            <div class="tab-content" id="projectTabsContent">
                <!-- All Tasks Tab -->
                <div class="tab-pane fade show active" id="tasks" role="tabpanel" aria-labelledby="tasks-tab">
                    <div class="d-flex justify-content-between align-items-center mb-4">
                        <h4 class="mb-0">All Tasks</h4>
                        <div>
                            <div class="input-group">
                                <input type="text" class="form-control" placeholder="Search tasks..." id="taskSearch">
                                <button class="btn btn-outline-secondary" type="button">
                                    <i class="fas fa-search"></i>
                                </button>
                            </div>
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-hover" id="tasksTable">
                            <thead class="table-light">
                                <tr>
                                    <th>Task</th>
                                    <th>Assigned To</th>
                                    <th>Due Date</th>
                                    <th>Status</th>
                                    <th>Priority</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.Tasks.Any())
                                {
                                    @foreach (var task in Model.Tasks)
                                    {
                                        <tr>
                                            <td>
                                                <div class="fw-medium">@task.Title</div>
                                                <small class="text-muted">@task.Description</small>
                                            </td>
                                            <td>
                                                @if (task.AssignedTo != null)
                                                {
                                                    <div class="d-flex align-items-center">
                                                        <div class="avatar-placeholder rounded-circle bg-primary text-white me-2"
                                                             style="width: 32px; height: 32px; display: flex; align-items: center; justify-content: center;">
                                                            @(task.AssignedTo.UserName.Substring(0, 1).ToUpper())
                                                        </div>
                                                        <span>@task.AssignedTo.UserName</span>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">Unassigned</span>
                                                }
                                            </td>
                                            <td>
                                                @if (task.EndDate.HasValue)
                                                {
                                                    <span>@task.EndDate.Value.ToString("MM/dd/yyyy")</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">No due date</span>
                                                }
                                            </td>
                                            <td>
                                                @{
                                                    var statusClass = task.Status switch
                                                    {
                                                        "Completed" or "Done" => "bg-success",
                                                        "In Progress" => "bg-primary",
                                                        "Todo" or "Not Started" => "bg-warning",
                                                        _ => "bg-secondary"
                                                    };
                                                }
                                                <span class="badge rounded-pill @statusClass">@task.Status</span>
                                            </td>
                                            <td>
                                                @{
                                                    var priorityClass = task.Priority switch
                                                    {
                                                        "High" => "text-danger",
                                                        "Medium" => "text-warning",
                                                        "Low" => "text-success",
                                                        _ => ""
                                                    };
                                                    var priorityIcon = task.Priority switch
                                                    {
                                                        "High" => "fa-arrow-up",
                                                        "Medium" => "fa-minus",
                                                        "Low" => "fa-arrow-down",
                                                        _ => "fa-minus"
                                                    };
                                                }
                                                <span class="@priorityClass">
                                                    <i class="fas @priorityIcon me-1"></i>
                                                    @task.Priority
                                                </span>
                                            </td>
                                            <td>
                                                <div class="btn-group">
                                                    @* <a href="@Url.Action("Details", "Task", new { id = task.Id })" class="btn btn-sm btn-outline-primary"> *@
                                                    @*     <i class="far fa-eye"></i> *@
                                                    @* </a> *@
                                                    <a href="@Url.Action("Edit", "Task", new { id = task.Id })"
                                                       class="btn btn-sm btn-outline-primary">
                                                        <i class="fas fa-pencil-alt me-1"></i>Edit
                                                    </a>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                }
                                else
                                {
                                    <tr>
                                        <td colspan="6" class="text-center py-4">
                                            <div class="py-5">
                                                <i class="fas fa-tasks fa-3x text-muted mb-3"></i>
                                                <h5>No tasks found</h5>
                                                <p class="text-muted">Get started by creating your first task</p>
                                                <a href="@Url.Action("Create", "Task", new { projectId = Model.Id })" class="btn btn-primary">
                                                    <i class="fas fa-plus me-1"></i> Add Task
                                                </a>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Progress Timeline Tab -->
                <div class="tab-pane fade" id="progress" role="tabpanel" aria-labelledby="progress-tab">
                    <div class="row">
                        <div class="col-12">
                            <h4 class="mb-4">Project Progress Timeline</h4>
                            <div id="progressChart" style="height: 350px;"></div>
                        </div>
                    </div>
                </div>

                <!-- Task Distribution Tab -->
                <div class="tab-pane fade" id="distribution" role="tabpanel" aria-labelledby="distribution-tab">
                    <div class="row">
                        <div class="col-md-6">
                            <h4 class="mb-4">Task Distribution</h4>
                            <div id="taskDistributionChart" style="height: 350px;"></div>
                        </div>
                        <div class="col-md-6">
                            <!-- Task Status Cards -->
                            <h4 class="mb-4">Task Status Breakdown</h4>
                            <div class="row">
                                <!-- Completed Status Card -->
                                <div class="col-md-6 mb-4">
                                    <div class="card shadow-sm h-100">
                                        <div class="card-body">
                                            <h5 class="card-title">Completed</h5>
                                            <div class="d-flex align-items-center mt-3">
                                                @{
                                                    var completedStyle = Model.GetStatusStyle("Completed");
                                                    var completedCount = Model.Tasks.Count(t => t.Status == "Completed");
                                                }
                                                <div class="status-icon rounded-circle p-2 me-3 d-flex justify-content-center align-items-center"
                                                     style="width: 50px; height: 50px; background-color: @completedStyle.BgColor;">
                                                    <i class="fas @completedStyle.Icon fa-2x @completedStyle.TextColor"></i>
                                                </div>
                                                <div>
                                                    <h4 class="mb-0 @completedStyle.TextColor">@completedCount</h4>
                                                    <small class="text-muted">Tasks</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- In Progress Status Card -->
                                <div class="col-md-6 mb-4">
                                    <div class="card shadow-sm h-100">
                                        <div class="card-body">
                                            <h5 class="card-title">In Progress</h5>
                                            <div class="d-flex align-items-center mt-3">
                                                @{
                                                    var inProgressStyle = Model.GetStatusStyle("In Progress");
                                                    var inProgressCount = Model.Tasks.Count(t => t.Status == "In Progress");
                                                }
                                                <div class="status-icon rounded-circle p-2 me-3 d-flex justify-content-center align-items-center"
                                                     style="width: 50px; height: 50px; background-color: @inProgressStyle.BgColor;">
                                                    <i class="fas @inProgressStyle.Icon fa-spin fa-2x @inProgressStyle.TextColor"></i>
                                                </div>
                                                <div>
                                                    <h4 class="mb-0 @inProgressStyle.TextColor">@inProgressCount</h4>
                                                    <small class="text-muted">Tasks</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Todo Status Card -->
                                <div class="col-md-6 mb-4">
                                    <div class="card shadow-sm h-100">
                                        <div class="card-body">
                                            <h5 class="card-title">Todo</h5>
                                            <div class="d-flex align-items-center mt-3">
                                                @{
                                                    var todoStyle = Model.GetStatusStyle("Todo");
                                                    var todoCount = Model.Tasks.Count(t => t.Status == "Todo");
                                                }
                                                <div class="status-icon rounded-circle p-2 me-3 d-flex justify-content-center align-items-center"
                                                     style="width: 50px; height: 50px; background-color: @todoStyle.BgColor;">
                                                    <i class="fas @todoStyle.Icon fa-2x @todoStyle.TextColor"></i>
                                                </div>
                                                <div>
                                                    <h4 class="mb-0 @todoStyle.TextColor">@todoCount</h4>
                                                    <small class="text-muted">Tasks</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <!-- Not Started Status Card -->
                                <div class="col-md-6 mb-4">
                                    <div class="card shadow-sm h-100">
                                        <div class="card-body">
                                            <h5 class="card-title">Not Started</h5>
                                            <div class="d-flex align-items-center mt-3">
                                                @{
                                                    var notStartedStyle = Model.GetStatusStyle("Not Started");
                                                    var notStartedCount = Model.Tasks.Count(t => t.Status == "Not Started");
                                                }
                                                <div class="status-icon rounded-circle p-2 me-3 d-flex justify-content-center align-items-center"
                                                     style="width: 50px; height: 50px; background-color: @notStartedStyle.BgColor;">
                                                    <i class="fas @notStartedStyle.Icon fa-2x @notStartedStyle.TextColor"></i>
                                                </div>
                                                <div>
                                                    <h4 class="mb-0 @notStartedStyle.TextColor">@notStartedCount</h4>
                                                    <small class="text-muted">Tasks</small>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Project Statistics Tab -->
                <div class="tab-pane fade" id="statistics" role="tabpanel" aria-labelledby="statistics-tab">
                    <h4 class="mb-4">Project Statistics</h4>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card shadow-sm">
                                <div class="card-header bg-white">
                                    <h5 class="card-title mb-0">Key Metrics</h5>
                                </div>
                                <div class="card-body">
                                    <ul class="list-group list-group-flush">
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <span>Total Tasks</span>
                                            <span class="badge bg-primary rounded-pill">@(Model.CompletedTasks + Model.InProgressTasks + Model.TodoTasks)</span>
                                        </li>
                                        @* <li class="list-group-item d-flex justify-content-between align-items-center"> *@
                                        @*     <span>Completion Rate</span> *@
                                        @*     <span class="badge bg-success rounded-pill">@Model.ProgressPercentage%</span> *@
                                        @* </li> *@
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <span>High Priority Tasks</span>
                                            <span class="badge bg-danger rounded-pill">@Model.Tasks.Count(t => t.Priority == "High")</span>
                                        </li>
                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                            <span>Time Remaining</span>
                                            <span class="badge bg-info rounded-pill">@(Model.DaysLeft) days</span>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="card shadow-sm">
                                <div class="card-header bg-white">
                                    <h5 class="card-title mb-0">Priority Distribution</h5>
                                </div>
                                <div class="card-body">
                                    <div id="priorityDistributionChart" style="height: 250px;"></div>
                                </div>
                            </div>
                        </div>
                    </div>
               
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {
    <!-- Add ApexCharts library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/apexcharts/3.35.0/apexcharts.min.js"></script>

    <script>
        $(document).ready(function() {
            // Initialize tooltips
            var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });

            // Add active class to current tab
            $('#projectTabs button').on('click', function (e) {
                e.preventDefault();
                $(this).tab('show');
            });

            // Task Distribution Chart (Donut Chart)
            var taskDistOptions = {
                series: [@Model.CompletedTasks, @Model.InProgressTasks, @Model.TodoTasks, @Model.Tasks.Count(t => t.Status == "Not Started")],
                chart: {
                    type: 'donut',
                    height: 350
                },
                colors: ['#00c853', '#0091ea', '#ffa000', '#757575'],
                labels: ['Completed', 'In Progress', 'Todo', 'Not Started'],
                legend: {
                    position: 'bottom'
                },
                responsive: [{
                    breakpoint: 480,
                    options: {
                        chart: {
                            width: 300
                        },
                        legend: {
                            position: 'bottom'
                        }
                    }
                }]
            };
            var taskDistChart = new ApexCharts(document.querySelector("#taskDistributionChart"), taskDistOptions);
            taskDistChart.render();

            // Progress Chart (Line Chart)
            var progressLineOptions = {
                series: [{
                    name: "Completed Tasks",
                    data: [0, 10, 20, 30, @Model.ProgressPercentage]
                }],
                chart: {
                    height: 350,
                    type: 'line',
                    toolbar: {
                        show: false
                    },
                    animations: {
                        enabled: true
                    }
                },
                stroke: {
                    width: 4,
                    curve: 'smooth'
                },
                colors: ['#0091ea'],
                xaxis: {
                    categories: ['Start', 'Week 1', 'Week 2', 'Week 3', 'Current'],
                },
                yaxis: {
                    min: 0,
                    max: 100,
                    labels: {
                        formatter: function(val) {
                            return val + "%";
                        }
                    }
                },
                markers: {
                    size: 6,
                    strokeWidth: 0,
                    hover: {
                        size: 9
                    }
                },
                grid: {
                    borderColor: '#e0e0e0',
                },
                tooltip: {
                    y: {
                        formatter: function(val) {
                            return val + "% complete";
                        }
                    }
                }
            };
            var progressChart = new ApexCharts(document.querySelector("#progressChart"), progressLineOptions);
            progressChart.render();

            // Priority Distribution Chart
            var priorityDistOptions = {
                series: [
        @Model.Tasks.Count(t => t.Priority == "High"),
        @Model.Tasks.Count(t => t.Priority == "Medium"),
        @Model.Tasks.Count(t => t.Priority == "Low")
                ],
                chart: {
                    type: 'pie',
                    height: 250
                },
                colors: ['#f44336', '#ffa000', '#00c853'],
                labels: ['High', 'Medium', 'Low'],
                legend: {
                    position: 'bottom'
                },
                responsive: [{
                    breakpoint: 480,
                    options: {
                        chart: {
                            width: 200
                        },
                        legend: {
                            position: 'bottom'
                        }
                    }
                }]
            };
            var priorityDistChart = new ApexCharts(document.querySelector("#priorityDistributionChart"), priorityDistOptions);
            priorityDistChart.render();

            // Completion Rate Chart (Bar Chart)
            var completionRateOptions = {
                series: [{
                    name: 'Completed',
                    data: [@Model.CompletedTasks]
                }, {
                    name: 'Remaining',
                    data: [@(Model.InProgressTasks + Model.TodoTasks + Model.Tasks.Count(t => t.Status == "Not Started"))]
                }],
                chart: {
                    type: 'bar',
                    height: 250,
                    stacked: true,
                },
                plotOptions: {
                    bar: {
                        horizontal: false,
                        columnWidth: '55%',
                    },
                },
                colors: ['#00c853', '#e0e0e0'],
                dataLabels: {
                    enabled: false
                },
                xaxis: {
                    categories: ['Tasks'],
                },
                fill: {
                    opacity: 1
                },
                legend: {
                    position: 'bottom',
                    horizontalAlign: 'center',
                },
                tooltip: {
                    y: {
                        formatter: function (val) {
                            return val + " tasks"
                        }
                    }
                }
            };
            var completionRateChart = new ApexCharts(document.querySelector("#completionRateChart"), completionRateOptions);
            completionRateChart.render();

            // Search functionality for tasks table
            $("#taskSearch").on("keyup", function() {
                var value = $(this).val().toLowerCase();
                $("#tasksTable tbody tr").filter(function() {
                    $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1)
                });
            });
        });
    </script>
    }

