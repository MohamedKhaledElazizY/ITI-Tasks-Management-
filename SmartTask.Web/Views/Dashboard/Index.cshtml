@model SmartTask.Web.ViewModels.DashboardVM.DashboardViewModel
@using Microsoft.AspNetCore.Identity
@using SmartTask.Core.Models
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Dashboard";
    var currentUser = await UserManager.GetUserAsync(User);

    // Get user preferences from ViewBag
    var userPreference = ViewBag.UserPreference as SmartTask.Core.Models.UserDashboardPreference;
    var showProjectStatus = userPreference?.ShowProjectStatus ?? true;
    var showRecentProjects = userPreference?.ShowRecentProjects ?? true;
    var showMyTasks = userPreference?.ShowMyTasks ?? true;
    var showTasksOverview = userPreference?.ShowTasksOverview ?? true;
    var preferredView = userPreference?.PreferredView ?? "grid";
    var recentProjectsCount = userPreference?.RecentProjectsCount ?? 5;

    // Pagination variables from ViewBag
    var currentPage = ViewBag.CurrentPage ?? 1;
    var totalPages = ViewBag.TotalPages ?? 1;
    var hasPreviousPage = ViewBag.HasPreviousPage ?? false;
    var hasNextPage = ViewBag.HasNextPage ?? false;

    // Search and filter params
    var searchString = ViewBag.SearchString ?? "";
    var selectedDepartment = ViewBag.SelectedDepartment ?? 0;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
 
</head>
<body>
    <div class="container-fluid py-4">
        <!-- Dashboard Header -->
        <div class="dashboard-header">
            <div class="header-content">
                <h1>
                    <i class="fas fa-tachometer-alt me-3"></i>
                    Welcome, <span class="username-highlight">@ViewBag.UserFullName</span>
                </h1>
                <p class="header-subtitle mb-0">Here's a comprehensive overview of your projects and progress</p>
                <p class="header-meta">
                    <i class="far fa-clock me-2"></i>
                    Last login: @ViewBag.LastLoginDate.ToString("MMM dd, yyyy HH:mm")
                </p>
            </div>

            <!-- Settings Button -->
            <a href="@Url.Action("Settings", "Dashboard")" class="settings-btn">
                <i class="fas fa-cog"></i>
                <span>Settings</span>
            </a>
        </div>

        <!-- Project Summary Widget -->
        <div id="project-status-widget" class="widget-section" style="display: @(showProjectStatus ? "block" : "none")">
            <div class="summary-card">
                <h3>
                    <i class="fas fa-chart-pie me-3"></i>
                    Project Performance Dashboard
                </h3>

                <div class="stats-grid">
                    <div class="stat-item">
                        <div class="stat-number">@Model.TotalProjects</div>
                        <div class="stat-label">Total Projects</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">@Model.CompletedProjects</div>
                        <div class="stat-label">Completed</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">@Model.InProgressProjects</div>
                        <div class="stat-label">In Progress</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">@Model.PendingProjects</div>
                        <div class="stat-label">Pending</div>
                    </div>
                    <div class="stat-item">
                        <div class="stat-number">@Model.TotalTasks</div>
                        <div class="stat-label">Total Tasks</div>
                    </div>
                </div>

                @if (Model.TotalProjects > 0)
                {
                    <div class="progress" style="height: 10px;">
                        <div class="progress-bar"
                             style="width: @(Math.Round((double)Model.CompletedProjects / Model.TotalProjects * 100))%">
                        </div>
                    </div>
                    <p class="mt-3 mb-0 opacity-90" style="font-weight: 600;">
                        @Math.Round((double)Model.CompletedProjects / Model.TotalProjects * 100)% overall completion rate
                    </p>
                }
            </div>
        </div>

        <div class="row">
            <!-- Recent Projects -->
            <div class="col-lg-6 mb-4">
                <div id="recent-projects-widget" class="widget-section" style="display: @(showRecentProjects ? "block" : "none")">
                    <div class="card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="section-title">
                                <i class="fas fa-project-diagram"></i>
                                Recent Projects
                            </h5>
                            <a href="@Url.Action("Index","Project")" class="view-all-link">
                                View All <i class="fas fa-chevron-right"></i>
                            </a>
                        </div>
                        <div class="card-body">
                            @if (!Model.Projects.Any())
                            {
                                <div class="empty-state">
                                    <i class="fas fa-project-diagram"></i>
                                    <h6>No Projects Found</h6>
                                    <p class="mb-0">@(User.IsInRole("Admin") ? "Create a new project to get started!" : "You haven't been assigned to any projects yet.")</p>
                                </div>
                            }
                            else
                            {
                                @foreach (var project in Model.Projects.Take(recentProjectsCount))
                                {
                                    var completedTasks = project.Tasks?.Count(t => t.Status == SmartTask.Core.Models.Enums.Status.Done) ?? 0;
                                    var totalProjectTasks = project.Tasks?.Count() ?? 1;
                                    var progressPercentage = (int)((completedTasks / (double)totalProjectTasks) * 100);
                                    var statusClass = project.Status?.ToLower() switch
                                    {
                                        "completed" => "success",
                                        "inprogress" => "primary",
                                        "pending" => "warning",
                                        _ => "secondary"
                                    };

                                    <div class="project-item" onclick="window.location.href='@Url.Action("Details", "Projects", new { id = project.Id })'">
                                        <div class="d-flex justify-content-between align-items-start mb-3">
                                            <h6 class="project-title">@project.Name</h6>
                                            <span class="badge bg-@statusClass">@project.Status</span>
                                        </div>

                                        @if (!string.IsNullOrEmpty(project.Description))
                                        {
                                            <p class="text-muted mb-3 small">
                                                @(project.Description.Length > 80 ? project.Description.Substring(0, 80) + "..." : project.Description)
                                            </p>
                                        }

                                        <div class="progress">
                                            <div class="progress-bar bg-@statusClass" style="width: @progressPercentage%"></div>
                                        </div>

                                        <div class="project-meta">
                                            <small class="text-muted fw-semibold">
                                                <i class="fas fa-tasks me-1"></i>
                                                @completedTasks/@totalProjectTasks Tasks
                                            </small>
                                            @if (project.EndDate.HasValue)
                                            {
                                                <small class="text-muted fw-semibold">
                                                    <i class="far fa-calendar me-1"></i>
                                                    Due @project.EndDate.Value.ToString("MMM dd")
                                                </small>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- My Tasks -->
            <div class="col-lg-6 mb-4">
                <div id="my-tasks-widget" class="widget-section" style="display: @(showMyTasks ? "block" : "none")">
                    <div class="card h-100">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="section-title">
                                <i class="fas fa-clipboard-list"></i>
                                My Active Tasks
                            </h5>
                            <a href="@Url.Action("MyTasks", "Dashboard")" class="view-all-link">
                                View All <i class="fas fa-chevron-right"></i>
                            </a>
                        </div>
                        <div class="card-body">
                            @if (!Model.MyTasks.Any())
                            {
                                <div class="empty-state">
                                    <i class="fas fa-clipboard-list"></i>
                                    <h6>No Tasks Assigned</h6>
                                    <p class="mb-0">You don't have any tasks assigned to you yet.</p>
                                </div>
                            }
                            else
                            {
                                @foreach (var task in Model.MyTasks.Take(5))
                                {
                                    var priorityClass = task.Priority.ToString().ToLower() switch
                                    {
                                        "high" => "danger",
                                        "medium" => "warning",
                                        "low" => "info",
                                        _ => "secondary"
                                    };

                                    var statusClass = task.Status.ToString().ToLower() switch
                                    {
                                        "done" => "success",
                                        "inprogress" => "primary",
                                        "todo" => "warning",
                                        _ => "secondary"
                                    };

                                    <div class="task-item">
                                        <div class="task-title">@task.Title</div>
                                        @if (!string.IsNullOrEmpty(task.Description))
                                        {
                                            <p class="text-muted mb-2 small">
                                                @(task.Description.Length > 60 ? task.Description.Substring(0, 60) + "..." : task.Description)
                                            </p>
                                        }

                                        <div class="task-meta">
                                            <span class="badge bg-@statusClass">@task.Status</span>
                                            <span class="badge bg-@priorityClass">@task.Priority</span>
                                            @if (task.DueDate.HasValue)
                                            {
                                                <small class="text-muted fw-semibold">
                                                    <i class="far fa-calendar me-1"></i>
                                                    Due @task.DueDate.Value.ToString("MMM dd")
                                                </small>
                                            }
                                            @if (!string.IsNullOrEmpty(task.ProjectName))
                                            {
                                                <small class="text-muted fw-semibold">
                                                    <i class="fas fa-project-diagram me-1"></i>
                                                    @task.ProjectName
                                                </small>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tasks Overview -->
        <div id="tasks-overview-widget" class="widget-section" style="display: @(showTasksOverview ? "block" : "none")">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="section-title">
                        <i class="fas fa-chart-bar"></i>
                        Tasks Performance Analytics
                    </h5>
                    <a href="@Url.Action("TaskOverview", "Dashboard")" class="view-all-link">
                        Detailed Analysis <i class="fas fa-chevron-right"></i>
                    </a>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-lg-2 col-md-4 col-6 mb-4">
                            <div class="tasks-overview-item todo">
                                <div class="overview-number text-warning">@Model.TodoTasks</div>
                                <div class="overview-label text-muted">To Do</div>
                            </div>
                        </div>
                        <div class="col-lg-2 col-md-4 col-6 mb-4">
                            <div class="tasks-overview-item inprogress">
                                <div class="overview-number" style="color: var(--primary-red);">@Model.InProgressTasks</div>
                                <div class="overview-label text-muted">In Progress</div>
                            </div>
                        </div>
                        <div class="col-lg-2 col-md-4 col-6 mb-4">
                            <div class="tasks-overview-item completed">
                                <div class="overview-number text-success">@Model.CompletedTasks</div>
                                <div class="overview-label text-muted">Completed</div>
                            </div>
                        </div>
                        <div class="col-lg-2 col-md-4 col-6 mb-4">
                            <div class="tasks-overview-item overdue">
                                <div class="overview-number" style="color: var(--deep-red);">@Model.OverdueTasks</div>
                                <div class="overview-label text-muted">Overdue</div>
                            </div>
                        </div>
                        <div class="col-lg-2 col-md-4 col-6 mb-4">
                            <div class="tasks-overview-item cancelled">
                                <div class="overview-number text-secondary">@Model.CancelledTasks</div>
                                <div class="overview-label text-muted">Cancelled</div>
                            </div>
                        </div>
                        <div class="col-lg-2 col-md-4 col-6 mb-4">
                            <div class="tasks-overview-item archived">
                                <div class="overview-number text-info">@Model.ArchievedTasks</div>
                                <div class="overview-label text-muted">Archived</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @section Styles
    {
        <style>
            /* ================================================= */
            /*            Refined Color Palette               */
            /* ================================================= */
            :root {
                /* Primary Colors - Softer, more coordinated */
                --header-color: #C62828;
                --sidebar-color: #1565C0;
                --light-red: #FFEBEE;
                --accent-red: #E53935;
                /* Neutrals - Better contrast ratios */
                --white: #FFFFFF;
                --light-gray: #F8F9FA;
                --medium-gray: #E9ECEF;
                --soft-gray: #F5F5F5;
                --text-gray: #6C757D;
                --dark-gray: #343A40;
                /* Status Colors - More muted for comfort */
                --success: #28A745;
                --warning: #FFC107;
                --info: #17A2B8;
                --danger: #DC3545;
                /* Borders and Shadows */
                --border-radius: 8px;
                --border-color: #DEE2E6;
                --shadow: 0 2px 4px rgba(0,0,0,0.08);
                --shadow-hover: 0 4px 8px rgba(0,0,0,0.12);
                --shadow-subtle: 0 1px 3px rgba(0,0,0,0.05);
            }

            /* ============================= */
            /*        Dashboard Header       */
            /* ============================= */
            .dashboard-header {
                background: linear-gradient(135deg, var(--header-color) 0%, #B71C1C 100%) !important;
                color: white !important;
                padding: 2rem;
                border-radius: 0 0 var(--border-radius) var(--border-radius);
                margin-bottom: 2rem;
                box-shadow: var(--shadow-hover);
                display: flex;
                align-items: center;
                justify-content: space-between;
            }

                .dashboard-header .header-content h1 {
                    font-size: 2rem;
                    font-weight: 600;
                    margin-bottom: 0.5rem;
                    text-shadow: 0 1px 2px rgba(0,0,0,0.1);
                }

                .dashboard-header .header-subtitle {
                    opacity: 0.95;
                    font-size: 1rem;
                }

                .dashboard-header .header-meta {
                    opacity: 0.85;
                    font-size: 0.9rem;
                    margin-top: 0.5rem;
                }

            .username-highlight {
                color: var(--light-red);
                font-weight: 500;
            }

            /* Settings Button */
            .settings-btn {
                display: flex;
                align-items: center;
                gap: 0.5rem;
                background: linear-gradient(135deg, var(--sidebar-color) 0%, #0D47A1 100%);
                color: white;
                padding: 0.75rem 1.25rem;
                border-radius: var(--border-radius);
                font-weight: 500;
                text-decoration: none;
                transition: all 0.3s ease;
                box-shadow: var(--shadow);
                border: 1px solid rgba(255,255,255,0.1);
            }

                .settings-btn:hover {
                    background: linear-gradient(135deg, #1976D2 0%, var(--sidebar-color) 100%);
                    color: white;
                    text-decoration: none;
                    transform: translateY(-1px);
                    box-shadow: var(--shadow-hover);
                }

            /* ============================= */
            /*        Summary Card           */
            /* ============================= */
            .summary-card {
                background: linear-gradient(135deg, var(--header-color) 0%, #B71C1C 100%) !important;
                color: white !important;
                border-radius: var(--border-radius);
                padding: 2rem;
                margin-bottom: 2rem;
                box-shadow: var(--shadow-hover);
                border: 1px solid rgba(255,255,255,0.1);
            }

                .summary-card h3 {
                    font-weight: 600;
                    font-size: 1.25rem;
                    margin-bottom: 1.5rem;
                    text-shadow: 0 1px 2px rgba(0,0,0,0.1);
                }

            .stats-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                gap: 1rem;
                margin-bottom: 1.5rem;
            }

            .stat-item {
                text-align: center;
                padding: 1.25rem;
                background: rgba(255,255,255,0.12);
                border-radius: var(--border-radius);
                border: 1px solid rgba(255,255,255,0.15);
                transition: all 0.3s ease;
                backdrop-filter: blur(10px);
            }

                .stat-item:hover {
                    background: rgba(255,255,255,0.18);
                    transform: translateY(-2px);
                }

            .stat-number {
                font-size: 2rem;
                font-weight: 700;
                margin-bottom: 0.25rem;
                line-height: 1;
                text-shadow: 0 1px 2px rgba(0,0,0,0.1);
            }

            .stat-label {
                font-size: 0.875rem;
                opacity: 0.95;
                font-weight: 500;
            }

            /* Progress Bar */
            .progress {
                height: 8px;
                background-color: rgba(255,255,255,0.2);
                border-radius: 4px;
                margin-bottom: 1rem;
                overflow: hidden;
            }

            .progress-bar {
                background: linear-gradient(90deg, var(--light-red) 0%, #FFCDD2 100%);
                border-radius: 4px;
                transition: width 0.3s ease;
            }

            /* ============================= */
            /*        Cards                  */
            /* ============================= */
            .card {
                border: 1px solid var(--border-color);
                border-radius: var(--border-radius);
                box-shadow: var(--shadow-subtle);
                background: var(--white);
                transition: all 0.3s ease;
            }

                .card:hover {
                    box-shadow: var(--shadow);
                }

            .card-header {
                background: var(--soft-gray);
                border-bottom: 1px solid var(--border-color);
                padding: 1rem 1.25rem;
                border-radius: var(--border-radius) var(--border-radius) 0 0;
            }

            .section-title {
                font-weight: 600;
                color: var(--dark-gray);
                margin: 0;
                font-size: 1.1rem;
            }

            .view-all-link {
                color: var(--header-color);
                text-decoration: none;
                font-weight: 500;
                font-size: 0.9rem;
                transition: color 0.3s ease;
            }

                .view-all-link:hover {
                    color: var(--accent-red);
                    text-decoration: none;
                }

            .card-body {
                padding: 1.25rem;
                background: var(--white);
            }

            /* ============================= */
            /*        Project Items          */
            /* ============================= */
            .project-item {
                border: 1px solid var(--border-color);
                border-radius: var(--border-radius);
                padding: 1.25rem;
                margin-bottom: 1rem;
                background: var(--white);
                transition: all 0.3s ease;
                cursor: pointer;
                border-left: 4px solid var(--header-color);
                position: relative;
            }

                .project-item::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background: linear-gradient(135deg, transparent 0%, rgba(198, 40, 40, 0.02) 100%);
                    border-radius: var(--border-radius);
                    opacity: 0;
                    transition: opacity 0.3s ease;
                }

                .project-item:hover {
                    box-shadow: var(--shadow-hover);
                    transform: translateY(-2px);
                    border-left-color: var(--accent-red);
                }

                    .project-item:hover::before {
                        opacity: 1;
                    }

            .project-title {
                font-weight: 600;
                margin-bottom: 0.5rem;
                color: var(--dark-gray);
                font-size: 1rem;
                position: relative;
                z-index: 1;
            }

            .project-meta {
                display: flex;
                align-items: center;
                gap: 1rem;
                flex-wrap: wrap;
                margin-top: 1rem;
                position: relative;
                z-index: 1;
            }

                .project-meta small {
                    color: var(--text-gray);
                }

            /* ============================= */
            /*        Task Items             */
            /* ============================= */
            .task-item {
                padding: 1.25rem;
                border-left: 4px solid var(--header-color);
                margin-bottom: 1rem;
                background: var(--soft-gray);
                border-radius: var(--border-radius);
                transition: all 0.3s ease;
                border: 1px solid var(--border-color);
                position: relative;
            }

                .task-item::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background: var(--white);
                    border-radius: var(--border-radius);
                    opacity: 0;
                    transition: opacity 0.3s ease;
                }

                .task-item:hover {
                    transform: translateX(4px);
                    box-shadow: var(--shadow);
                    border-left-color: var(--accent-red);
                }

                    .task-item:hover::before {
                        opacity: 1;
                    }

            .task-title {
                font-weight: 600;
                margin-bottom: 0.5rem;
                color: var(--dark-gray);
                font-size: 1rem;
                position: relative;
                z-index: 1;
            }

            .task-meta {
                display: flex;
                align-items: center;
                gap: 0.75rem;
                flex-wrap: wrap;
                margin-top: 0.75rem;
                position: relative;
                z-index: 1;
            }

            /* ============================= */
            /*        Tasks Overview         */
            /* ============================= */
            .tasks-overview-item {
                padding: 1.5rem 1rem;
                border-radius: var(--border-radius);
                text-align: center;
                transition: all 0.3s ease;
                border: 1px solid var(--border-color);
                background: var(--white);
                box-shadow: var(--shadow-subtle);
                position: relative;
                overflow: hidden;
            }

                .tasks-overview-item::before {
                    content: '';
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    background: linear-gradient(135deg, transparent 0%, rgba(0,0,0,0.02) 100%);
                    opacity: 0;
                    transition: opacity 0.3s ease;
                }

                .tasks-overview-item:hover {
                    transform: translateY(-2px);
                    box-shadow: var(--shadow);
                }

                    .tasks-overview-item:hover::before {
                        opacity: 1;
                    }

            .overview-number {
                font-size: 2rem;
                font-weight: 700;
                margin-bottom: 0.5rem;
                line-height: 1;
                position: relative;
                z-index: 1;
            }

            .overview-label {
                font-size: 0.875rem;
                font-weight: 500;
                color: var(--text-gray);
                text-transform: uppercase;
                letter-spacing: 0.025em;
                position: relative;
                z-index: 1;
            }

            /* Status-specific colors for overview items - More subtle */
            .tasks-overview-item.todo .overview-number {
                color: #E67E22;
            }

            .tasks-overview-item.inprogress .overview-number {
                color: var(--header-color);
            }

            .tasks-overview-item.completed .overview-number {
                color: var(--success);
            }

            .tasks-overview-item.overdue .overview-number {
                color: var(--danger);
            }

            .tasks-overview-item.cancelled .overview-number {
                color: var(--text-gray);
            }

            .tasks-overview-item.archived .overview-number {
                color: var(--info);
            }

            /* ============================= */
            /*        Badges                 */
            /* ============================= */
            .badge {
                font-size: 0.75rem;
                font-weight: 500;
                padding: 0.375rem 0.75rem;
                border-radius: 6px;
                text-shadow: none;
                border: 1px solid transparent;
            }

            .bg-success {
                background-color: var(--success) !important;
                border-color: rgba(255,255,255,0.2);
            }

            .bg-primary {
                background-color: var(--header-color) !important;
                border-color: rgba(255,255,255,0.2);
            }

            .bg-warning {
                background-color: var(--warning) !important;
                color: var(--dark-gray) !important;
                border-color: rgba(0,0,0,0.1);
            }

            .bg-danger {
                background-color: var(--danger) !important;
                border-color: rgba(255,255,255,0.2);
            }

            .bg-info {
                background-color: var(--info) !important;
                border-color: rgba(255,255,255,0.2);
            }

            .bg-secondary {
                background-color: var(--text-gray) !important;
                border-color: rgba(255,255,255,0.2);
            }

            /* ============================= */
            /*        Progress Bars          */
            /* ============================= */
            .progress {
                height: 6px;
                background-color: var(--medium-gray);
                border-radius: 3px;
                margin: 0.75rem 0;
                overflow: hidden;
            }

            .progress-bar.bg-success {
                background: linear-gradient(90deg, var(--success) 0%, #34CE57 100%) !important;
            }

            .progress-bar.bg-primary {
                background: linear-gradient(90deg, var(--header-color) 0%, var(--accent-red) 100%) !important;
            }

            .progress-bar.bg-warning {
                background: linear-gradient(90deg, var(--warning) 0%, #FFD54F 100%) !important;
            }

            /* ============================= */
            /*        Empty State            */
            /* ============================= */
            .empty-state {
                text-align: center;
                padding: 3rem 1rem;
                color: var(--text-gray);
                background: var(--soft-gray);
                border-radius: var(--border-radius);
                border: 1px dashed var(--border-color);
            }

                .empty-state i {
                    font-size: 3rem;
                    margin-bottom: 1rem;
                    opacity: 0.5;
                    color: var(--header-color);
                }

                .empty-state h6 {
                    font-weight: 600;
                    margin-bottom: 0.5rem;
                    color: var(--dark-gray);
                }

            /* ============================= */
            /*        Widget Sections        */
            /* ============================= */
            .widget-section {
                margin-bottom: 2rem;
            }

            /* ============================= */
            /*        Utilities              */
            /* ============================= */
            .text-muted {
                color: var(--text-gray) !important;
            }

            .fw-semibold {
                font-weight: 600 !important;
            }

            .opacity-90 {
                opacity: 0.9 !important;
            }

            /* ============================= */
            /*        Enhanced Accessibility */
            /* ============================= */
            @@media (prefers-reduced-motion: reduce) {
                *

            {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }

            }

            /* Focus states for better accessibility */
            .settings-btn:focus,
            .project-item:focus,
            .task-item:focus,
            .tasks-overview-item:focus {
                outline: 2px solid var(--sidebar-color);
                outline-offset: 2px;
            }

            /* Improved contrast for better readability */
            .card-body p,
            .project-item p,
            .task-item p {
                line-height: 1.6;
                color: var(--dark-gray);
            }

            @@keyframes fadeInUp {
                from

            {
                opacity: 0;
                transform: translateY(10px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }

            }

            .card,
            .project-item,
            .task-item,
            .tasks-overview-item {
                animation: fadeInUp 0.3s ease-out;
            }

        </style>
    }
    <!-- JavaScript -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function() {
            // Enhanced animations and interactions
            $('.project-item, .task-item').hover(
                function() {
                    $(this).addClass('shadow-lg');
                },
                function() {
                    $(this).removeClass('shadow-lg');
                }
            );

            // Smooth scroll animations for widgets
            $('.widget-section').each(function(index) {
                $(this).css('animation-delay', (index * 0.1) + 's');
            });

            // Enhanced toast notifications
        @if (TempData["SuccessMessage"] != null)
        {
            <text>
                        // Create and show enhanced toast notification
                        const toastHtml = `
                            <div class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050">
                                <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true" data-bs-autohide="true" data-bs-delay="6000">
                                    <div class="toast-header" style="background: var(--gradient-primary); color: white; border: none;">
                                        <i class="fas fa-check-circle me-2"></i>
                                        <strong class="me-auto">Success</strong>
                                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                                    </div>
                                    <div class="toast-body" style="background: white; border: 1px solid var(--red-100); border-top: none; border-radius: 0 0 12px 12px;">
                            @TempData["SuccessMessage"]
                                    </div>
                                </div>
                            </div>
                        `;
                        $('body').append(toastHtml);

                        // Auto hide after 6 seconds
                        setTimeout(function() {
                            $('.toast').toast('hide');
                            setTimeout(function() {
                                $('.toast').parent().remove();
                            }, 300);
                        }, 6000);
            </text>
        }

            // Add ripple effect to clickable items
            $('.project-item, .task-item, .tasks-overview-item').on('click', function(e) {
                const ripple = $('<span class="ripple"></span>');
                const rect = this.getBoundingClientRect();
                const size = Math.max(rect.width, rect.height);
                const x = e.clientX - rect.left - size / 2;
                const y = e.clientY - rect.top - size / 2;

                ripple.css({
                    width: size,
                    height: size,
                    left: x,
                    top: y,
                    position: 'absolute',
                    borderRadius: '50%',
                    background: 'rgba(220, 20, 60, 0.3)',
                    transform: 'scale(0)',
                    animation: 'ripple-animation 0.6s ease-out',
                    pointerEvents: 'none'
                });

                $(this).css('position', 'relative').css('overflow', 'hidden').append(ripple);

                setTimeout(() => {
                    ripple.remove();
                }, 600);
            });

        //     Add CSS for ripple animation
        //     $('<style>').prop('type', 'text/css').html(`
        // keyframes ripple-animation {
        //             to {
        //                 transform: scale(2);
        //                 opacity: 0;
        //             }
        //         }
        //     `).appendTo('head');

            // Intersection Observer for smooth animations
            const observerOptions = {
                threshold: 0.1,
                rootMargin: '0px 0px -50px 0px'
            };

            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.style.opacity = '1';
                        entry.target.style.transform = 'translateY(0)';
                    }
                });
            }, observerOptions);

            $('.widget-section').each(function() {
                observer.observe(this);
            });
        });
    </script>
</body>
</html>