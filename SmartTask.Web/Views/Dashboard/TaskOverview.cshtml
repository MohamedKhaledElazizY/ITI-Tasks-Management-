@model IEnumerable<SmartTask.Core.Models.Task>

<div class="card shadow-sm border-0 mb-4">

    <div class="card-header bg-white py-3">
        <div class="d-flex justify-content-between align-items-center">
            <h5 class="fw-bold mb-0">
                <i class="fas fa-tasks me-2"></i>Task Overview
            </h5>
            <div>

                <button id="toggleFilters" class="btn btn-sm btn-outline-primary" title="Show/Hide Filters">
                    <i class="fas fa-filter me-1"></i> Filters
                </button>
            </div>
        </div>
    </div>

    <div class="card-body py-3 bg-light">
        <div class="row g-3">
            <div class="col-md-3 col-6">
                <div class="card h-100 border-0 shadow-sm">
                    <div class="card-body p-3 text-center">
                        <h6 class="text-muted mb-1">Total Tasks</h6>
                        <h4 class="fw-bold mb-0" id="totalTasksCount">@ViewBag.TotalTasks</h4>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-6">
                <div class="card h-100 border-0 shadow-sm bg-info bg-opacity-25">
                    <div class="card-body p-3 text-center">
                        <h6 class="text-info mb-1">To Do</h6>
                        <h4 class="fw-bold mb-0" id="todoTasksCount">@ViewBag.TodoTasks</h4>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-6">
                <div class="card h-100 border-0 shadow-sm bg-warning bg-opacity-25">
                    <div class="card-body p-3 text-center">
                        <h6 class="text-warning mb-1">In Progress</h6>
                        <h4 class="fw-bold mb-0" id="inProgressTasksCount">@ViewBag.InProgressTasks</h4>
                    </div>
                </div>
            </div>
            <div class="col-md-3 col-6">
                <div class="card h-100 border-0 shadow-sm bg-success bg-opacity-25">
                    <div class="card-body p-3 text-center">
                        <h6 class="text-success mb-1">Completed</h6>
                        <h4 class="fw-bold mb-0" id="completedTasksCount">@ViewBag.CompletedTasks</h4>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Simplified Filter Panel -->
    <div id="filterPanel" class="card-body border-top bg-white p-4" style="display: none;">
        <!-- Quick Search Bar -->
        <div class="row mb-4">
            <div class="col-md-8">
                <div class="input-group">
                    <span class="input-group-text"><i class="fas fa-search"></i></span>
                    <input type="text" class="form-control" id="quickSearchKeyword" placeholder="Quick search by task name...">
                </div>
            </div>
            <div class="col-md-4">
                <div class="btn-group w-100" role="group">
                    <button type="button" class="btn btn-outline-primary" id="quickFilterBtn" onclick="quickFilter()">
                        <i class="fas fa-bolt me-1"></i> Quick Filter
                    </button>
                    <button type="button" class="btn btn-outline-secondary" onclick="resetQuickFilter()">
                        <i class="fas fa-undo me-1"></i> Clear
                    </button>
                </div>
            </div>
        </div>

        <form id="taskFilters" class="needs-validation">
            <div class="row g-3">
                <!-- Simplified Filters -->
                <div class="col-lg-3">
                    <div class="mb-3">
                        <label class="form-label small fw-bold">Status</label>
                        <select class="form-select filter-select" id="statusFilter" multiple>
                            <option value="todo">To Do</option>
                            <option value="inprogress">In Progress</option>
                            <option value="done">Done</option>
                            <option value="archieved">Archived</option>
                            <option value="cancelled">Cancelled</option>
                        </select>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="mb-3">
                        <label class="form-label small fw-bold">Project</label>
                        <select class="form-select filter-select" id="projectFilter" multiple>
                            @foreach (var project in Model.Select(t => t.Project).Distinct().Where(p => p != null))
                            {
                                <option value="@project.Id">@project.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="mb-3">
                        <label class="form-label small fw-bold">Assigned To</label>
                        <select class="form-select filter-select" id="assignedFilter" multiple>
                            @foreach (var user in Model.SelectMany(t => t.Assignments.Select(a => a.User)).Distinct().Where(u => u != null))
                            {
                                <option value="@user.Id">@user.UserName</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="mb-3">
                        <label class="form-label">&nbsp;</label>
                        <div class="d-flex gap-2">
                            <button type="button" id="applyFilters" class="btn btn-primary flex-fill">
                                <i class="fas fa-check me-1"></i> Apply
                            </button>
                            <button type="button" id="resetFilters" class="btn btn-light flex-fill">
                                <i class="fas fa-undo me-1"></i> Reset
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <!--  DataTable -->
    <div class="card-body p-0">
        <div class="table-responsive">
            <table id="tasksTable" class="table table-striped table-hover border-bottom" style="width:100%">
                <thead class="table-light">
                    <tr>
                        <th>Task Name</th>
                        <th>Project</th>
                        <th>Assigned To</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in Model)
                    {
                        <tr class="task-row"
                            data-title="@(task.Title != null ? task.Title.ToLowerInvariant() : "")"
                            data-status="@task.Status.ToString().ToLowerInvariant()"
                            data-project-id="@task.ProjectId"
                            data-assigned-ids="@string.Join(",", task.Assignments.Select(a => a.UserId))">

                            <td>
                                <div>
                                    <a asp-action="Details" asp-route-id="@task.Id" class="text-decoration-none fw-medium">
                                        @task.Title
                                    </a>
                                    @if (task.SubTasks != null && task.SubTasks.Any())
                                    {
                                        <span class="badge bg-info ms-2 small">@task.SubTasks.Count subtasks</span>
                                    }
                                </div>
                                @if (!string.IsNullOrEmpty(task.Description))
                                {
                                    <small class="text-muted d-block">@task.Description.Substring(0, Math.Min(100, task.Description.Length))@(task.Description.Length > 100 ? "..." : "")</small>
                                }
                            </td>
                            <td data-project-id="@task.ProjectId">
                                @if (task.Project != null)
                                {
                                    <span class="text-dark">@task.Project.Name</span>
                                }
                                else
                                {
                                    <span class="text-muted fst-italic">No project</span>
                                }
                            </td>
                            <td data-assigned-ids="@string.Join(",", task.Assignments.Select(a => a.UserId))">
                                @if (task.Assignments != null && task.Assignments.Any())
                                {
                                    <div>
                                        @foreach (var assignment in task.Assignments.Take(2))
                                        {
                                            <span class="badge bg-secondary me-1">@assignment.User?.UserName</span>
                                        }
                                        @if (task.Assignments.Count() > 2)
                                        {
                                            <span class="badge bg-light text-dark">+@(task.Assignments.Count() - 2) more</span>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <span class="text-muted fst-italic">Unassigned</span>
                                }
                            </td>
                            <td data-status="@task.Status.ToString().ToLowerInvariant()">
                                <span class="badge status-@task.Status.ToString().ToLowerInvariant()">
                                    @task.Status
                                </span>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    <div>
        <a href="@Url.Action("Index", "Dashboard")" class="btn btn-secondary" id="cancelBtn">
            <i class="fas fa-arrow-left"></i>
            Back to Dashboard
        </a>
    </div>

    <!-- No Tasks Message -->
    <div id="noTasksMessage" class="alert alert-warning text-center m-4" style="display:none;">
        <i class="fas fa-info-circle me-2"></i>No tasks found matching the selected filters.
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <style>
        /* Select2 Bootstrap Integration */
        .select2-container--default .select2-selection--multiple {
            border-color: #dee2e6;
        }

        .select2-container--default.select2-container--focus .select2-selection--multiple {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.25);
        }

        .select2-container {
            width: 100% !important;
        }

        /* Status badges */
        .badge.status-todo {
            background-color: #6c757d !important;
            color: white;
        }

        .badge.status-inprogress {
            background-color: #fd7e14 !important;
            color: white;
        }

        .badge.status-done {
            background-color: #198754 !important;
            color: white;
        }

        .badge.status-archieved {
            background-color: #0dcaf0 !important;
            color: #212529;
        }

        .badge.status-cancelled {
            background-color: #dc3545 !important;
            color: white;
        }

        /* DataTables Customization */
        .dataTables_wrapper .dataTables_filter input {
            margin-left: 0.5em;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 0.375rem 0.75rem;
        }

        .dataTables_wrapper .dataTables_length select {
            border: 1px solid #dee2e6;
            border-radius: 4px;
            padding: 0.375rem 0.5rem;
        }

        .dataTables_wrapper .dataTables_info,
        .dataTables_wrapper .dataTables_paginate {
            padding-top: 1rem;
            padding-bottom: 1rem;
        }

        .table {
            margin-bottom: 0;
        }

        /* Card styling */
        .card {
            border-radius: 0.5rem;
            overflow: hidden;
        }

        /* Quick search styling */
        #quickSearchKeyword {
            border-radius: 0.375rem;
        }

        .input-group-text {
            background-color: #f8f9fa;
        }

        /* Filter panel animation */
        #filterPanel {
            transition: all 0.3s ease-in-out;
        }

        /* Task description truncation */
        .task-row td:first-child {
            max-width: 300px;
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

    <script>
               // Fixed DataTable initialization script
        var table; // Declare table globally

        // Define showToast function globally
        function showToast(message, type) {
            // Create toast container if it doesn't exist
            if (!$('#toastContainer').length) {
                $('body').append('<div id="toastContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1055;"></div>');
            }

            const toastId = 'toast-' + Date.now();
            const bgClass = type === 'success' ? 'bg-success' :
                           type === 'error' ? 'bg-danger' :
                           type === 'warning' ? 'bg-warning' : 'bg-info';

            const toastHtml = `
                <div id="${toastId}" class="toast ${bgClass} text-white" role="alert">
                    <div class="toast-header ${bgClass} text-white border-0">
                        <i class="fas fa-${type === 'success' ? 'check-circle' :
                                           type === 'error' ? 'exclamation-circle' :
                                           type === 'warning' ? 'exclamation-triangle' : 'info-circle'} me-2"></i>
                        <strong class="me-auto">${type.charAt(0).toUpperCase() + type.slice(1)}</strong>
                        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                    </div>
                    <div class="toast-body">${message}</div>
                </div>
            `;

            $('#toastContainer').append(toastHtml);

            // Show toast and auto-remove
            setTimeout(() => {
                $('#' + toastId).fadeOut(() => {
                    $('#' + toastId).remove();
                });
            }, 4000);
        }

        $(document).ready(function () {
            try {
                console.log('Initializing simplified DataTable...');

                // Check if table element exists
                if ($('#tasksTable').length === 0) {
                    console.error('Table element #tasksTable not found');
                    return;
                }

                // Initialize DataTable with corrected column configuration
                table = $('#tasksTable').DataTable({
                    dom: '<"row"<"col-md-6"l><"col-md-6"f>><"table-responsive"t><"row"<"col-md-6"i><"col-md-6"p>>',
                    pageLength: 25,
                    order: [[0, 'asc']], // Default sort by task name
                    language: {
                        search: "<i class='fas fa-search me-1'></i> Search:",
                        lengthMenu: "Show MENU tasks",
                        info: "Showing START to END of TOTAL tasks",
                        paginate: {
                            first: "<i class='fas fa-angle-double-left'></i>",
                            last: "<i class='fas fa-angle-double-right'></i>",
                            next: "<i class='fas fa-angle-right'></i>",
                            previous: "<i class='fas fa-angle-left'></i>"
                        }
                    },
                    columnDefs: [
                        { targets: [0], orderable: true, width: "40%" },    // Task Name
                        { targets: [1], orderable: true, width: "20%" },    // Project
                        { targets: [2], orderable: true, width: "25%" },    // Assigned To
                        { targets: [3], orderable: true, width: "15%" }     // Status (removed reference to column 4)
                    ],
                    responsive: true,
                    stateSave: true,
                    processing: true,
                    initComplete: function() {
                        console.log('DataTable initialized successfully');
                        updateTaskCounts();
                    },
                    drawCallback: function() {
                        updateTaskCounts();

                        // Show/hide no tasks message
                        var info = this.api().page.info();
                        if (info.recordsDisplay === 0) {
                            $('#noTasksMessage').show();
                        } else {
                            $('#noTasksMessage').hide();
                        }
                    }
                });

                console.log('DataTable object created:', table);

                // Initialize Select2 for filters
                $('.filter-select').select2({
                    placeholder: "Select options",
                    allowClear: true,
                    width: '100%',
                    closeOnSelect: false,
                    dropdownParent: $('#filterPanel')
                });

                // Toggle filter panel
                $('#toggleFilters').click(function() {
                    $('#filterPanel').slideToggle(300, function() {
                        const isVisible = $(this).is(':visible');
                        $('#toggleFilters').html(
                            isVisible
                                ? '<i class="fas fa-times me-1"></i> Hide Filters'
                                : '<i class="fas fa-filter me-1"></i> Filters'
                        ).toggleClass('btn-outline-primary btn-primary');
                    });
                });

                // Update task counts function
                function updateTaskCounts() {
                    try {
                        if (!table || typeof table.page !== 'function') {
                            console.warn("Table not fully initialized yet");
                            return;
                        }

                        const info = table.page.info();
                        const totalVisible = info.recordsDisplay;

                        let counts = {
                            total: 0,
                            todo: 0,
                            inprogress: 0,
                            done: 0
                        };

                        table.rows({ search: 'applied' }).every(function() {
                            const $row = $(this.node());
                            const status = $row.attr('data-status');

                            counts.total++;

                            if (status === 'todo') counts.todo++;
                            else if (status === 'inprogress') counts.inprogress++;
                            else if (status === 'done') counts.done++;
                        });

                        $('#totalTasksCount').text(totalVisible);
                        $('#todoTasksCount').text(counts.todo);
                        $('#inProgressTasksCount').text(counts.inprogress);
                        $('#completedTasksCount').text(counts.done);
                    } catch (error) {
                        console.error("Error in updateTaskCounts:", error);
                    }
                }

                // Quick filter functionality
                function quickFilter() {
                    if (!table || typeof table.search !== 'function') {
                        console.error("Table not initialized for quick filter");
                        return;
                    }

                    const keyword = $('#quickSearchKeyword').val().toLowerCase();
                    table.search(keyword).draw();

                    if (keyword) {
                        showToast('Quick filter applied!', 'info');
                    }
                }

                function resetQuickFilter() {
                    if (!table || typeof table.search !== 'function') {
                        console.error("Table not initialized for reset filter");
                        return;
                    }

                    $('#quickSearchKeyword').val('');
                    table.search('').draw();
                    showToast('Quick filter cleared!', 'info');
                }

                // Make functions global
                window.quickFilter = quickFilter;
                window.resetQuickFilter = resetQuickFilter;

                // Enter key support for quick search
                $('#quickSearchKeyword').keypress(function(e) {
                    if (e.which === 13) {
                        quickFilter();
                    }
                });

                // Store custom search functions
                let customSearchFunctions = [];

                function clearAllCustomFilters() {
                    customSearchFunctions.forEach(fn => {
                        const index = $.fn.dataTable.ext.search.indexOf(fn);
                        if (index > -1) {
                            $.fn.dataTable.ext.search.splice(index, 1);
                        }
                    });
                    customSearchFunctions = [];
                }

                function addCustomFilter(filterFunction) {
                    customSearchFunctions.push(filterFunction);
                    $.fn.dataTable.ext.search.push(filterFunction);
                }

                // Apply all filters function
                function applyAllFilters() {
                    if (!table || typeof table.draw !== 'function') {
                        console.error("Table not initialized for apply all filters");
                        return;
                    }

                    clearAllCustomFilters();

                    const filters = {
                        status: $('#statusFilter').val() || [],
                        project: $('#projectFilter').val() || [],
                        assigned: $('#assignedFilter').val() || [],
                        quickSearch: $('#quickSearchKeyword').val().toLowerCase()
                    };

                    // Check if any filters are applied
                    const hasFilters = filters.status.length > 0 ||
                                      filters.project.length > 0 ||
                                      filters.assigned.length > 0 ||
                                      filters.quickSearch;

                    if (!hasFilters) {
                        table.search('').draw();
                        return;
                    }

                    const combinedFilter = function(settings, data, dataIndex) {
                        if (!table || typeof table.row !== 'function') {
                            return true;
                        }

                        const rowNode = table.row(dataIndex).node();
                        const $row = $(rowNode);

                        // Quick search filter
                        if (filters.quickSearch) {
                            const title = $row.attr('data-title') || '';
                            if (!title.includes(filters.quickSearch)) {
                                return false;
                            }
                        }

                        // Status filter
                        if (filters.status.length > 0) {
                            const rowStatus = $row.attr('data-status');
                            if (!filters.status.includes(rowStatus)) {
                                return false;
                            }
                        }

                        // Project filter
                        if (filters.project.length > 0) {
                            const rowProjectId = $row.attr('data-project-id');
                            if (!rowProjectId || !filters.project.includes(rowProjectId)) {
                                return false;
                            }
                        }

                        // Assigned filter
                        if (filters.assigned.length > 0) {
                            const assignedIds = ($row.attr('data-assigned-ids') || '').split(',').filter(id => id);
                            if (assignedIds.length === 0) {
                                return false;
                            }
                            const hasMatch = filters.assigned.some(filterId => assignedIds.includes(filterId));
                            if (!hasMatch) {
                                return false;
                            }
                        }

                        return true;
                    };

                    addCustomFilter(combinedFilter);
                    table.draw();
                }

                // Apply filters button
                $('#applyFilters').click(function() {
                    if (!table) {
                        console.error("Table not initialized for apply filters");
                        return;
                    }
                    applyAllFilters();
                    showToast('Filters applied successfully!', 'success');
                });

                // Reset filters button
                $('#resetFilters').click(function() {
                    if (!table) {
                        console.error("Table not initialized for reset filters");
                        return;
                    }

                    $('.filter-select').val(null).trigger('change');
                    $('#quickSearchKeyword').val('');
                    clearAllCustomFilters();
                    table.search('').draw();
                    showToast('All filters reset successfully!', 'info');
                });

                // Initialize tooltips
                $('[title]').tooltip();

                console.log('Simplified Task Overview page initialized successfully');

            } catch (error) {
                console.error("DataTable initialization failed:", error);
                showToast('Failed to initialize table. Please refresh the page.', 'error');
            }
            });

    </script>
}