@using SmartTask.Core.Models.Enums
@model SmartTask.Core.Models.Task

@{
    var isDone = Model.Status == Status.Done;
    bool isProjectOwner = ViewBag.IsProjectOwner ?? false;
    bool hasDependencies = Model.SuccessorDependencies?.Any() == true;
}

@* <div class="kanban-task card mb-2 @(isDone ? "disabled" : "")" data-id="@Model.Id" data-priority="@Model.Priority" data-status="@Model.Status"> *@
<div class="kanban-task card mb-2 @(isDone ? "disabled" : "")"
     data-id="@Model.Id"
     data-priority="@Model.Priority"
     data-status="@Model.Status"
     data-dependencies='@Html.Raw(Json.Serialize(Model.SuccessorDependencies.Select(d => new
    {
        type = d.DependencyType,
        status = d.Predecessor.Status,
        title = d.Predecessor.Title
    })))'>
    <div class="card-body">
        <h6 class="card-title fw-bold">@Model.Title</h6>

        @if (Model.SuccessorDependencies?.Any() == true)
        {
            <div class="alert alert-warning mb-2 p-2">
                <strong>Depends on:</strong>
                <ul>
                    @foreach (var dependency in Model.SuccessorDependencies)
                    {
                        if (dependency.Predecessor != null)
                        {
                            <li>@dependency.Predecessor.Title (@dependency.DependencyType)</li>
                        }
                    }
                </ul>
            </div>
        }
        else
        {
            <div class="alert alert-success mb-2 p-2">
                <strong>No dependencies</strong>
            </div>
        }

        @if (Model.Assignments != null && Model.Assignments.Any())
        {
            <p class="card-text">
                <span>Assigned To:</span>
                <ul>
                    @foreach (var assign in Model.Assignments)
                    {
                        <li>
                            @assign.User?.FullName
                            @if (!string.IsNullOrEmpty(assign.User?.Email))
                            {
                                <text>(@assign.User.Email)</text>
                            }
                        </li>
                    }
                </ul>
            </p>
        }
        else
        {
            <p class="card-text text-muted">No assignments</p>
        }
        <p class="card-text">
            Priority: <span class="badge bg-@(GetPriorityColor(Model.Priority))">@Model.Priority</span>
        </p>
        <p class="card-text">
            Status: <span class="badge bg-dark text-white status-badge">@Model.Status</span>
        </p>
        @if (isProjectOwner)
        {
            <a href="/Task/Edit/@Model.Id" class="btn btn-sm btn-primary">Edit</a>
        }
        else
        {
            <button class="btn btn-sm btn-primary" onclick="openEditTaskModal(@Model.Id)">Edit</button>
        }
        <a href="details/@Model.Id" class="btn btn-sm btn-success">Details</a>
    </div>
</div>

@functions {
    string GetPriorityColor(Priority priority)
    {
        return priority switch
        {
            Priority.High => "danger",
            Priority.Medium => "warning",
            Priority.Low => "success",
            _ => "secondary"
        };
    }
}