@using SmartTask.Core.Models.Enums
@model List<SmartTask.Core.Models.Task>

@{
    ViewData["Title"] = "Tasks";

}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet" />

<style>
    .table th {
        font-weight: normal;
        color: #666;
        border-top: none;
    }

    .table td {
        padding-top: 15px;
        padding-bottom: 15px;
        vertical-align: middle;
    }
    .task-table {
        border-radius: 12px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.05);
        overflow: hidden;
    }

        .task-table th, .task-table td {
            vertical-align: middle;
        }

    .progress {
        height: 8px;
        border-radius: 6px;
    }

    .btn-action {
        width: 36px;
        height: 36px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
</style>

<div class="container mt-5">
    <h2 class="mb-4 text-center fw-bold">Task List Overview</h2>

    <div class="table-responsive">
        <table class="table task-table align-middle">
            <thead>
                <tr class="bg-light">
                    <th>Title</th>

                    <th>Priority</th>
                    <th>Start Date</th>
                    <th class="text-center">Status</th>
                    <th class="text-center">Actions</th>
                    
                </tr>
            </thead>
            <tbody>
                @foreach (var task in Model)
                {
                    <tr id="row @task.Id">
                        <td class="fw-bold">@task.Title</td>

                        <td>
                            <span class="badge bg-@(GetPriorityColor(task.Priority))">@task.Priority</span>
                        </td>
                        <td>
                            <div>@task.StartDate?.Date.ToString("dd-MM-yyyy")</div>
                            <div class="small text-muted">@((task.StartDate?.Day - DateTime.Now.Day < 0 ? 0 : task.StartDate?.Day - DateTime.Now.Day)) days</div>
                        </td>
                        <td style="width: 200px;">
                            @* <div class="d-flex align-items-center gap-2"> *@
                            @*     <div class="w-100"> *@
                            @*         <div class="small">@task.Status</div> *@
                            @*         <div class="progress"> *@
                            @*             <div class="progress-bar bg-@(GetStatusColor(task.Status))" style="width: @(GetStatusProgress(task.Status))%"></div> *@
                            @*         </div> *@
                            @*     </div> *@
                            @* </div> *@
                            @{
                                Status status = task.Status;
                                bool isCancelled = status == Status.Cancelled;
                                int filledSegments = status switch
                                {
                                    Status.Todo => 1,
                                    Status.Cancelled or Status.InProgress => 2,
                                    Status.Done => 3,
                                    _ => 0
                                };
                                string barColor = status switch
                                {
                                    Status.Todo => "bg-primary",
                                    Status.InProgress => "bg-warning",
                                    Status.Cancelled => "bg-danger",
                                    Status.Done=> "bg-success",
                                    _ => "bg-secondary"
                                };
                                string textClass = isCancelled ? "text-decoration-line-through text-muted" : "";
                            }
                            <div class="d-flex align-items-center flex-column">
                                <span class="ms-2 small fw-bold @textClass">@task.Status</span>
                                <div class="d-flex flex-row w-100" style="gap: 2px;">

                                    @for (int i = 1; i <= 3; i++)
                                    {
                                        <div class="flex-fill rounded" style="height: 8px; background-color: #e0e0e0;">
                                            @if (i <= filledSegments)
                                            {
                                                <div class="@barColor h-100 w-100 rounded"></div>
                                            }
                                        </div>
                                    }
                                </div>

                            </div>
                        </td>
                        <td class="text-center">
                            <div class="d-flex justify-content-center gap-2">


                                <!-- Details Button (opens modal) -->
                                <button class="btn btn-info btn-action" id="openPopup"
                                        onclick="loadTaskDetails(@task.Id)">
                                    <i class="bi bi-eye"></i>
                                </button>
                                
                                <!-- Assign to User Button -->
                                <secure-content asp-area="" asp-controller="" asp-action="">
                                <button class="btn btn-warning btn-action" title="Assign Task"
                                        data-bs-toggle="modal" data-bs-target="#assignModal"
                                        data-id="@task.Id">
                                    <i class="bi bi-person-plus"></i>
                                </button>
                                </secure-content>
                                <secure-content asp-area="" asp-controller="" asp-action="">
                                <button class="btn btn-primary btn-action">
                                    <i class="bi bi-pencil"></i>
                                </button>
                                </secure-content>
                                <secure-content asp-area="" asp-controller="Task" asp-action="DeleteTask">
                                <button class="btn btn-danger btn-action" data-bs-toggle="modal" data-bs-target="#deleteModal"
                                        data-id="@task.Id" onclick="numofdepend(@task.Id)">
                                    <i class="bi bi-trash"></i>
                                </button>
                                </secure-content>
                                <button class="btn btn-secondary openPopup" data-task-id="@task.Id">
                                    <i class="bi bi-diagram-3"></i> Dependencies
                                </button>

                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>


<div class="modal fade" id="popupModal" tabindex="-1" aria-labelledby="popupModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content shadow">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="popupModalLabel">Edit Task Dependencies</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="dependencyForm">
                <div class="modal-body" id="popupContent">
                    <!-- The partial view content will be loaded here -->
                    <div class="text-center">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    </div>
                </div>
                <div class="modal-footer d-flex justify-content-between">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Save Dependencies</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal fade" id="taskDetailsModal" tabindex="-1">
    <div class="modal-dialog modal-lg modal-dialog-centered">
        <div class="modal-content shadow" id="taskDetailsContent">
            <!-- Content will be loaded here -->
        </div>
    </div>
</div>
<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content shadow">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteModalLabel">Delete Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <!-- Confirmation text -->
                <p class="fw-bold ">Are you sure you want to delete this task?</p>
                <p id="depend" class="text-danger">Maybe has Tasks depend on it</p>
            </div>
            <div class="modal-footer">
                <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button class="btn btn-danger" data-bs-dismiss="modal" id="condelte" onclick="deleteTask(this)">Delete</button>
            </div>
        </div>
    </div>
</div>


<!-- Bootstrap & Script -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    // Handle opening the popup and loading partial view
    $(document).on('click', '.openPopup', function () {
        const taskId = $(this).data("task-id");

        $.ajax({
            url: '/Task/LoadNodes/' + taskId, // Your action for loading dependencies form
            type: 'GET',
            success: function (response) {
                $('#popupContent').html(response);
                $('#SelectedTaskId').val(taskId);
                $('#popupModal').modal('show');
            },
            error: function () {
                alert('Failed to load task dependencies.');
            }
        });
    });

    // Handle form submission
        $('#dependencyForm').submit(function (e) {
        e.preventDefault();
        const formData = $(this).serialize();

        $.ajax({
            url: '/Task/SaveSelectedTasks', // Your POST action
            type: 'POST',
            data: formData,
            success: function (e) {
                alert(e);
                $('#popupModal').modal('hide');
            },
            error: function () {
                alert('Failed to save dependencies.');
            }
        });
    });
</script>
@functions {

    string GetPriorityColor(Priority priority)
    {
        return priority switch
        {
            Priority.High => "danger",
            Priority.Medium => "warning",
            Priority.Low=> "success",
            _ => "secondary"
        };
    }
}
<script>
    function loadTaskDetails(taskId) {
            $.ajax({
                url: '@Url.Action("Details", "Task")/' + taskId,
                type: 'GET',
                success: function(response) {
                    $('#taskDetailsContent').html(response);
                    var detailsModal = new bootstrap.Modal(document.getElementById('taskDetailsModal'));
                    detailsModal.show();
                },
                error: function(error) {
                    console.log('Error loading task details:', error);
                    alert('Failed to load task details. Please try again.');
                }
            });
        }
</script>

<script>

    function numofdepend(taskId) {
        document.querySelector('#condelte').dataset.id = taskId;
        $.ajax({
                    url: '/Task/Depend',
            type: 'GET',
            data: { taskid: taskId },
            success: function(x) {
                            document.getElementById('depend').innerText='this task depend on :'+x+' Tasks';
                        },
            error: function(xhr) {
                            alert('Error: ' + xhr.responseText);
                        }
                    });
                }
</script>



<script>
function deleteTask(b) {
      var a=  b.dataset.id;
    $.ajax({
                url: '/Task/DeleteTask',
        type: 'DELETE',
            data: { taskid: a },
        success: function() {
                        alert('Task deleted successfully!');
                                document.getElementById(`row ${a}`).remove();
                    },
        error: function(xhr) {
                        alert('Error: ' + xhr.responseText);
                    }
                });
            }
</script>